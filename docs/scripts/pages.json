[{"name":"abstract class Window","description":"com.github.mnemotechnician.mkui.windows.Window","location":"lib/com.github.mnemotechnician.mkui.windows/-window/index.html","searchKeys":["Window","abstract class Window","com.github.mnemotechnician.mkui.windows.Window"]},{"name":"abstract fun onCreate()","description":"com.github.mnemotechnician.mkui.windows.Window.onCreate","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-create.html","searchKeys":["onCreate","abstract fun onCreate()","com.github.mnemotechnician.mkui.windows.Window.onCreate"]},{"name":"abstract var closeable: Boolean","description":"com.github.mnemotechnician.mkui.windows.Window.closeable","location":"lib/com.github.mnemotechnician.mkui.windows/-window/closeable.html","searchKeys":["closeable","abstract var closeable: Boolean","com.github.mnemotechnician.mkui.windows.Window.closeable"]},{"name":"abstract var name: String","description":"com.github.mnemotechnician.mkui.windows.Window.name","location":"lib/com.github.mnemotechnician.mkui.windows/-window/name.html","searchKeys":["name","abstract var name: String","com.github.mnemotechnician.mkui.windows.Window.name"]},{"name":"fun Cell<Label>.scaleFont(scale: Float): Cell<Label>","description":"com.github.mnemotechnician.mkui.scaleFont","location":"lib/com.github.mnemotechnician.mkui/scale-font.html","searchKeys":["scaleFont","fun Cell<Label>.scaleFont(scale: Float): Cell<Label>","com.github.mnemotechnician.mkui.scaleFont"]},{"name":"fun Cell<TextButton>.scaleButtonFont(scale: Float): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.scaleButtonFont","location":"lib/com.github.mnemotechnician.mkui/scale-button-font.html","searchKeys":["scaleButtonFont","fun Cell<TextButton>.scaleButtonFont(scale: Float): Cell<TextButton>","com.github.mnemotechnician.mkui.scaleButtonFont"]},{"name":"fun Table.hsplitter(color: Color = Color.white, padding: Float = 5.0f): Cell<Image>","description":"com.github.mnemotechnician.mkui.hsplitter","location":"lib/com.github.mnemotechnician.mkui/hsplitter.html","searchKeys":["hsplitter","fun Table.hsplitter(color: Color = Color.white, padding: Float = 5.0f): Cell<Image>","com.github.mnemotechnician.mkui.hsplitter"]},{"name":"fun Table.vsplitter(color: Color = Color.white, padding: Float = 5.0f): Cell<Image>","description":"com.github.mnemotechnician.mkui.vsplitter","location":"lib/com.github.mnemotechnician.mkui/vsplitter.html","searchKeys":["vsplitter","fun Table.vsplitter(color: Color = Color.white, padding: Float = 5.0f): Cell<Image>","com.github.mnemotechnician.mkui.vsplitter"]},{"name":"fun TablePager(vertical: Boolean = false)","description":"com.github.mnemotechnician.mkui.ui.TablePager.TablePager","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/-table-pager.html","searchKeys":["TablePager","fun TablePager(vertical: Boolean = false)","com.github.mnemotechnician.mkui.ui.TablePager.TablePager"]},{"name":"fun Window()","description":"com.github.mnemotechnician.mkui.windows.Window.Window","location":"lib/com.github.mnemotechnician.mkui.windows/-window/-window.html","searchKeys":["Window","fun Window()","com.github.mnemotechnician.mkui.windows.Window.Window"]},{"name":"fun createWindow(window: Window)","description":"com.github.mnemotechnician.mkui.windows.WindowManager.createWindow","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/create-window.html","searchKeys":["createWindow","fun createWindow(window: Window)","com.github.mnemotechnician.mkui.windows.WindowManager.createWindow"]},{"name":"inline fun <T> Cell<Element>.getAs(): T","description":"com.github.mnemotechnician.mkui.getAs","location":"lib/com.github.mnemotechnician.mkui/get-as.html","searchKeys":["getAs","inline fun <T> Cell<Element>.getAs(): T","com.github.mnemotechnician.mkui.getAs"]},{"name":"inline fun <T> Cell<Element?>.getAsOrNull(): Cell<Element?>?","description":"com.github.mnemotechnician.mkui.getAsOrNull","location":"lib/com.github.mnemotechnician.mkui/get-as-or-null.html","searchKeys":["getAsOrNull","inline fun <T> Cell<Element?>.getAsOrNull(): Cell<Element?>?","com.github.mnemotechnician.mkui.getAsOrNull"]},{"name":"inline fun <T> Element.asOrNull(): Any?","description":"com.github.mnemotechnician.mkui.asOrNull","location":"lib/com.github.mnemotechnician.mkui/as-or-null.html","searchKeys":["asOrNull","inline fun <T> Element.asOrNull(): Any?","com.github.mnemotechnician.mkui.asOrNull"]},{"name":"inline fun <T> Group.childAs(index: Int): T","description":"com.github.mnemotechnician.mkui.childAs","location":"lib/com.github.mnemotechnician.mkui/child-as.html","searchKeys":["childAs","inline fun <T> Group.childAs(index: Int): T","com.github.mnemotechnician.mkui.childAs"]},{"name":"inline fun <T> Group.childAsOrNull(index: Int): T?","description":"com.github.mnemotechnician.mkui.childAsOrNull","location":"lib/com.github.mnemotechnician.mkui/child-as-or-null.html","searchKeys":["childAsOrNull","inline fun <T> Group.childAsOrNull(index: Int): T?","com.github.mnemotechnician.mkui.childAsOrNull"]},{"name":"inline fun Group.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","description":"com.github.mnemotechnician.mkui.addTable","location":"lib/com.github.mnemotechnician.mkui/add-table.html","searchKeys":["addTable","inline fun Group.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","com.github.mnemotechnician.mkui.addTable"]},{"name":"inline fun Group.child(index: Int): Element","description":"com.github.mnemotechnician.mkui.child","location":"lib/com.github.mnemotechnician.mkui/child.html","searchKeys":["child","inline fun Group.child(index: Int): Element","com.github.mnemotechnician.mkui.child"]},{"name":"inline fun Group.childOrNull(index: Int): Element?","description":"com.github.mnemotechnician.mkui.childOrNull","location":"lib/com.github.mnemotechnician.mkui/child-or-null.html","searchKeys":["childOrNull","inline fun Group.childOrNull(index: Int): Element?","com.github.mnemotechnician.mkui.childOrNull"]},{"name":"inline fun Table.addCollapser(crossinline shown: () -> Boolean = { true }, background: Drawable = Styles.none, animate: Boolean = false, constructor: Table.() -> Unit = {}): Cell<Collapser>","description":"com.github.mnemotechnician.mkui.addCollapser","location":"lib/com.github.mnemotechnician.mkui/add-collapser.html","searchKeys":["addCollapser","inline fun Table.addCollapser(crossinline shown: () -> Boolean = { true }, background: Drawable = Styles.none, animate: Boolean = false, constructor: Table.() -> Unit = {}): Cell<Collapser>","com.github.mnemotechnician.mkui.addCollapser"]},{"name":"inline fun Table.addCollapser(shown: Boolean = true, background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Collapser>","description":"com.github.mnemotechnician.mkui.addCollapser","location":"lib/com.github.mnemotechnician.mkui/add-collapser.html","searchKeys":["addCollapser","inline fun Table.addCollapser(shown: Boolean = true, background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Collapser>","com.github.mnemotechnician.mkui.addCollapser"]},{"name":"inline fun Table.addImage(crossinline provider: () -> TextureRegion): Cell<Image>","description":"com.github.mnemotechnician.mkui.addImage","location":"lib/com.github.mnemotechnician.mkui/add-image.html","searchKeys":["addImage","inline fun Table.addImage(crossinline provider: () -> TextureRegion): Cell<Image>","com.github.mnemotechnician.mkui.addImage"]},{"name":"inline fun Table.addImage(drawable: Drawable): Cell<Image>","description":"com.github.mnemotechnician.mkui.addImage","location":"lib/com.github.mnemotechnician.mkui/add-image.html","searchKeys":["addImage","inline fun Table.addImage(drawable: Drawable): Cell<Image>","com.github.mnemotechnician.mkui.addImage"]},{"name":"inline fun Table.addImage(drawable: TextureRegion): Cell<Image>","description":"com.github.mnemotechnician.mkui.addImage","location":"lib/com.github.mnemotechnician.mkui/add-image.html","searchKeys":["addImage","inline fun Table.addImage(drawable: TextureRegion): Cell<Image>","com.github.mnemotechnician.mkui.addImage"]},{"name":"inline fun Table.addLabel(crossinline provider: () -> CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null): Cell<Label>","description":"com.github.mnemotechnician.mkui.addLabel","location":"lib/com.github.mnemotechnician.mkui/add-label.html","searchKeys":["addLabel","inline fun Table.addLabel(crossinline provider: () -> CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null): Cell<Label>","com.github.mnemotechnician.mkui.addLabel"]},{"name":"inline fun Table.addLabel(text: CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = false, ellipsis: String? = null): Cell<Label>","description":"com.github.mnemotechnician.mkui.addLabel","location":"lib/com.github.mnemotechnician.mkui/add-label.html","searchKeys":["addLabel","inline fun Table.addLabel(text: CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = false, ellipsis: String? = null): Cell<Label>","com.github.mnemotechnician.mkui.addLabel"]},{"name":"inline fun Table.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Table>","description":"com.github.mnemotechnician.mkui.addTable","location":"lib/com.github.mnemotechnician.mkui/add-table.html","searchKeys":["addTable","inline fun Table.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Table>","com.github.mnemotechnician.mkui.addTable"]},{"name":"inline fun Table.buttonGroup(background: Drawable = Styles.none, constructor: Table.(ButtonGroup<Button>) -> Unit): Cell<Table>","description":"com.github.mnemotechnician.mkui.buttonGroup","location":"lib/com.github.mnemotechnician.mkui/button-group.html","searchKeys":["buttonGroup","inline fun Table.buttonGroup(background: Drawable = Styles.none, constructor: Table.(ButtonGroup<Button>) -> Unit): Cell<Table>","com.github.mnemotechnician.mkui.buttonGroup"]},{"name":"inline fun Table.customButton(constructor: Button.() -> Unit, style: Button.ButtonStyle = Styles.defaultb, crossinline onclick: Button.() -> Unit = {}): Cell<Button>","description":"com.github.mnemotechnician.mkui.customButton","location":"lib/com.github.mnemotechnician.mkui/custom-button.html","searchKeys":["customButton","inline fun Table.customButton(constructor: Button.() -> Unit, style: Button.ButtonStyle = Styles.defaultb, crossinline onclick: Button.() -> Unit = {}): Cell<Button>","com.github.mnemotechnician.mkui.customButton"]},{"name":"inline fun Table.imageButton(crossinline provider: () -> TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.imageButton","location":"lib/com.github.mnemotechnician.mkui/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(crossinline provider: () -> TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.imageButton"]},{"name":"inline fun Table.imageButton(image: Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.imageButton","location":"lib/com.github.mnemotechnician.mkui/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(image: Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.imageButton"]},{"name":"inline fun Table.imageButton(image: TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.imageButton","location":"lib/com.github.mnemotechnician.mkui/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(image: TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.imageButton"]},{"name":"inline fun Table.imageToggle(text: Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","description":"com.github.mnemotechnician.mkui.imageToggle","location":"lib/com.github.mnemotechnician.mkui/image-toggle.html","searchKeys":["imageToggle","inline fun Table.imageToggle(text: Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","com.github.mnemotechnician.mkui.imageToggle"]},{"name":"inline fun Table.pager(vertical: Boolean = false, constructor: TablePager.() -> Unit): Cell<TablePager>","description":"com.github.mnemotechnician.mkui.pager","location":"lib/com.github.mnemotechnician.mkui/pager.html","searchKeys":["pager","inline fun Table.pager(vertical: Boolean = false, constructor: TablePager.() -> Unit): Cell<TablePager>","com.github.mnemotechnician.mkui.pager"]},{"name":"inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","description":"com.github.mnemotechnician.mkui.scrollPane","location":"lib/com.github.mnemotechnician.mkui/scroll-pane.html","searchKeys":["scrollPane","inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","com.github.mnemotechnician.mkui.scrollPane"]},{"name":"inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, element: Element): Cell<ScrollPane>","description":"com.github.mnemotechnician.mkui.scrollPane","location":"lib/com.github.mnemotechnician.mkui/scroll-pane.html","searchKeys":["scrollPane","inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, element: Element): Cell<ScrollPane>","com.github.mnemotechnician.mkui.scrollPane"]},{"name":"inline fun Table.textArea(text: String = \"\", style: TextField.TextFieldStyle = Styles.areaField, crossinline onchange: TextArea.(String) -> Unit = {}): Cell<TextArea>","description":"com.github.mnemotechnician.mkui.textArea","location":"lib/com.github.mnemotechnician.mkui/text-area.html","searchKeys":["textArea","inline fun Table.textArea(text: String = \"\", style: TextField.TextFieldStyle = Styles.areaField, crossinline onchange: TextArea.(String) -> Unit = {}): Cell<TextArea>","com.github.mnemotechnician.mkui.textArea"]},{"name":"inline fun Table.textButton(crossinline provider: () -> String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.textButton","location":"lib/com.github.mnemotechnician.mkui/text-button.html","searchKeys":["textButton","inline fun Table.textButton(crossinline provider: () -> String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","com.github.mnemotechnician.mkui.textButton"]},{"name":"inline fun Table.textButton(text: String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.textButton","location":"lib/com.github.mnemotechnician.mkui/text-button.html","searchKeys":["textButton","inline fun Table.textButton(text: String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","com.github.mnemotechnician.mkui.textButton"]},{"name":"inline fun Table.textField(text: String = \"\", style: TextField.TextFieldStyle = Styles.defaultField, crossinline onchange: TextField.(String) -> Unit = {}): Cell<TextField>","description":"com.github.mnemotechnician.mkui.textField","location":"lib/com.github.mnemotechnician.mkui/text-field.html","searchKeys":["textField","inline fun Table.textField(text: String = \"\", style: TextField.TextFieldStyle = Styles.defaultField, crossinline onchange: TextField.(String) -> Unit = {}): Cell<TextField>","com.github.mnemotechnician.mkui.textField"]},{"name":"inline fun Table.textToggle(text: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","description":"com.github.mnemotechnician.mkui.textToggle","location":"lib/com.github.mnemotechnician.mkui/text-toggle.html","searchKeys":["textToggle","inline fun Table.textToggle(text: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","com.github.mnemotechnician.mkui.textToggle"]},{"name":"inline fun Table.toggleButton(constructor: Button.() -> Unit, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","description":"com.github.mnemotechnician.mkui.toggleButton","location":"lib/com.github.mnemotechnician.mkui/toggle-button.html","searchKeys":["toggleButton","inline fun Table.toggleButton(constructor: Button.() -> Unit, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<Button>","com.github.mnemotechnician.mkui.toggleButton"]},{"name":"inline fun addPage(name: String, constructor: Table.() -> Unit): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.ui.TablePager.addPage","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/add-page.html","searchKeys":["addPage","inline fun addPage(name: String, constructor: Table.() -> Unit): Cell<TextButton>","com.github.mnemotechnician.mkui.ui.TablePager.addPage"]},{"name":"inline fun createWindow(name: String, crossinline constructor: Table.() -> Unit)","description":"com.github.mnemotechnician.mkui.windows.WindowManager.createWindow","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/create-window.html","searchKeys":["createWindow","inline fun createWindow(name: String, crossinline constructor: Table.() -> Unit)","com.github.mnemotechnician.mkui.windows.WindowManager.createWindow"]},{"name":"inline operator fun <T : Element> Group.plusAssign(other: T)","description":"com.github.mnemotechnician.mkui.plusAssign","location":"lib/com.github.mnemotechnician.mkui/plus-assign.html","searchKeys":["plusAssign","inline operator fun <T : Element> Group.plusAssign(other: T)","com.github.mnemotechnician.mkui.plusAssign"]},{"name":"inline operator fun <T : Element> Table.plusAssign(other: T)","description":"com.github.mnemotechnician.mkui.plusAssign","location":"lib/com.github.mnemotechnician.mkui/plus-assign.html","searchKeys":["plusAssign","inline operator fun <T : Element> Table.plusAssign(other: T)","com.github.mnemotechnician.mkui.plusAssign"]},{"name":"lateinit var buttonsTable: Table","description":"com.github.mnemotechnician.mkui.ui.TablePager.buttonsTable","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/buttons-table.html","searchKeys":["buttonsTable","lateinit var buttonsTable: Table","com.github.mnemotechnician.mkui.ui.TablePager.buttonsTable"]},{"name":"lateinit var pageContainer: Table","description":"com.github.mnemotechnician.mkui.ui.TablePager.pageContainer","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/page-container.html","searchKeys":["pageContainer","lateinit var pageContainer: Table","com.github.mnemotechnician.mkui.ui.TablePager.pageContainer"]},{"name":"lateinit var table: Table","description":"com.github.mnemotechnician.mkui.windows.Window.table","location":"lib/com.github.mnemotechnician.mkui.windows/-window/table.html","searchKeys":["table","lateinit var table: Table","com.github.mnemotechnician.mkui.windows.Window.table"]},{"name":"object WindowManager","description":"com.github.mnemotechnician.mkui.windows.WindowManager","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/index.html","searchKeys":["WindowManager","object WindowManager","com.github.mnemotechnician.mkui.windows.WindowManager"]},{"name":"open class TablePager(vertical: Boolean) : Table","description":"com.github.mnemotechnician.mkui.ui.TablePager","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/index.html","searchKeys":["TablePager","open class TablePager(vertical: Boolean) : Table","com.github.mnemotechnician.mkui.ui.TablePager"]},{"name":"open fun addPage(name: String, page: Table): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.ui.TablePager.addPage","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/add-page.html","searchKeys":["addPage","open fun addPage(name: String, page: Table): Cell<TextButton>","com.github.mnemotechnician.mkui.ui.TablePager.addPage"]},{"name":"open fun onDestroy()","description":"com.github.mnemotechnician.mkui.windows.Window.onDestroy","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-destroy.html","searchKeys":["onDestroy","open fun onDestroy()","com.github.mnemotechnician.mkui.windows.Window.onDestroy"]},{"name":"open fun onDrag()","description":"com.github.mnemotechnician.mkui.windows.Window.onDrag","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-drag.html","searchKeys":["onDrag","open fun onDrag()","com.github.mnemotechnician.mkui.windows.Window.onDrag"]},{"name":"open fun onToggle(collapsed: Boolean)","description":"com.github.mnemotechnician.mkui.windows.Window.onToggle","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-toggle.html","searchKeys":["onToggle","open fun onToggle(collapsed: Boolean)","com.github.mnemotechnician.mkui.windows.Window.onToggle"]},{"name":"open fun onUpdate()","description":"com.github.mnemotechnician.mkui.windows.Window.onUpdate","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-update.html","searchKeys":["onUpdate","open fun onUpdate()","com.github.mnemotechnician.mkui.windows.Window.onUpdate"]},{"name":"val vertical: Boolean = false","description":"com.github.mnemotechnician.mkui.ui.TablePager.vertical","location":"lib/com.github.mnemotechnician.mkui.ui/-table-pager/vertical.html","searchKeys":["vertical","val vertical: Boolean = false","com.github.mnemotechnician.mkui.ui.TablePager.vertical"]},{"name":"var isCollapsed: Boolean = false","description":"com.github.mnemotechnician.mkui.windows.Window.isCollapsed","location":"lib/com.github.mnemotechnician.mkui.windows/-window/is-collapsed.html","searchKeys":["isCollapsed","var isCollapsed: Boolean = false","com.github.mnemotechnician.mkui.windows.Window.isCollapsed"]},{"name":"var isDragging: Boolean = false","description":"com.github.mnemotechnician.mkui.windows.Window.isDragging","location":"lib/com.github.mnemotechnician.mkui.windows/-window/is-dragging.html","searchKeys":["isDragging","var isDragging: Boolean = false","com.github.mnemotechnician.mkui.windows.Window.isDragging"]}]
