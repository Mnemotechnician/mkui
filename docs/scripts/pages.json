[{"name":"abstract class Window","description":"com.github.mnemotechnician.mkui.windows.Window","location":"lib/com.github.mnemotechnician.mkui.windows/-window/index.html","searchKeys":["Window","abstract class Window","com.github.mnemotechnician.mkui.windows.Window"]},{"name":"abstract fun onCreate()","description":"com.github.mnemotechnician.mkui.windows.Window.onCreate","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-create.html","searchKeys":["onCreate","abstract fun onCreate()","com.github.mnemotechnician.mkui.windows.Window.onCreate"]},{"name":"abstract val closeable: Boolean","description":"com.github.mnemotechnician.mkui.windows.Window.closeable","location":"lib/com.github.mnemotechnician.mkui.windows/-window/closeable.html","searchKeys":["closeable","abstract val closeable: Boolean","com.github.mnemotechnician.mkui.windows.Window.closeable"]},{"name":"abstract val name: String","description":"com.github.mnemotechnician.mkui.windows.Window.name","location":"lib/com.github.mnemotechnician.mkui.windows/-window/name.html","searchKeys":["name","abstract val name: String","com.github.mnemotechnician.mkui.windows.Window.name"]},{"name":"fun <T : ToggleButton> Cell<T>.toggle(state: Boolean): Cell<T>","description":"com.github.mnemotechnician.mkui.ui.element.toggle","location":"lib/com.github.mnemotechnician.mkui.ui.element/toggle.html","searchKeys":["toggle","fun <T : ToggleButton> Cell<T>.toggle(state: Boolean): Cell<T>","com.github.mnemotechnician.mkui.ui.element.toggle"]},{"name":"fun <T> BundleDelegate(prefix: String, substitutions: Array<T?>?)","description":"com.github.mnemotechnician.mkui.delegates.BundleDelegate.BundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-bundle-delegate/-bundle-delegate.html","searchKeys":["BundleDelegate","fun <T> BundleDelegate(prefix: String, substitutions: Array<T?>?)","com.github.mnemotechnician.mkui.delegates.BundleDelegate.BundleDelegate"]},{"name":"fun <T> LazyNameSettingDelegate(lazyPrefix: () -> String?, default: T)","description":"com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.LazyNameSettingDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-name-setting-delegate/-lazy-name-setting-delegate.html","searchKeys":["LazyNameSettingDelegate","fun <T> LazyNameSettingDelegate(lazyPrefix: () -> String?, default: T)","com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.LazyNameSettingDelegate"]},{"name":"fun <T> SettingDelegate(prefix: String, default: T)","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate.SettingDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/-setting-delegate.html","searchKeys":["SettingDelegate","fun <T> SettingDelegate(prefix: String, default: T)","com.github.mnemotechnician.mkui.delegates.SettingDelegate.SettingDelegate"]},{"name":"fun Cell<*>.scaleFont(scale: Float): Cell<*>","description":"com.github.mnemotechnician.mkui.extensions.elements.scaleFont","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/scale-font.html","searchKeys":["scaleFont","fun Cell<*>.scaleFont(scale: Float): Cell<*>","com.github.mnemotechnician.mkui.extensions.elements.scaleFont"]},{"name":"fun Cell<*>.scaleImage(scaling: Scaling): Cell<*>","description":"com.github.mnemotechnician.mkui.extensions.elements.scaleImage","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/scale-image.html","searchKeys":["scaleImage","fun Cell<*>.scaleImage(scaling: Scaling): Cell<*>","com.github.mnemotechnician.mkui.extensions.elements.scaleImage"]},{"name":"fun DynamicBundleDelegate(prefix: String, functions: Array<out () -> Any?>?)","description":"com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.DynamicBundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-dynamic-bundle-delegate/-dynamic-bundle-delegate.html","searchKeys":["DynamicBundleDelegate","fun DynamicBundleDelegate(prefix: String, functions: Array<out () -> Any?>?)","com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.DynamicBundleDelegate"]},{"name":"fun Element.shrink(invalidateParents: Boolean = false)","description":"com.github.mnemotechnician.mkui.extensions.elements.shrink","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/shrink.html","searchKeys":["shrink","fun Element.shrink(invalidateParents: Boolean = false)","com.github.mnemotechnician.mkui.extensions.elements.shrink"]},{"name":"fun Group.deepShrink(shrinkParents: Boolean = false, invalidateParents: Boolean = true)","description":"com.github.mnemotechnician.mkui.extensions.groups.deepShrink","location":"lib/com.github.mnemotechnician.mkui.extensions.groups/deep-shrink.html","searchKeys":["deepShrink","fun Group.deepShrink(shrinkParents: Boolean = false, invalidateParents: Boolean = true)","com.github.mnemotechnician.mkui.extensions.groups.deepShrink"]},{"name":"fun LazyDynamicBundleDelegate(lazyPrefix: () -> String?, functions: Array<out () -> Any?>)","description":"com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.LazyDynamicBundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-dynamic-bundle-delegate/-lazy-dynamic-bundle-delegate.html","searchKeys":["LazyDynamicBundleDelegate","fun LazyDynamicBundleDelegate(lazyPrefix: () -> String?, functions: Array<out () -> Any?>)","com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.LazyDynamicBundleDelegate"]},{"name":"fun Page(name: String, background: Drawable = Styles.none)","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.Page","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/-page.html","searchKeys":["Page","fun Page(name: String, background: Drawable = Styles.none)","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.Page"]},{"name":"fun Table.addImage(drawable: Drawable, scaling: Scaling = Scaling.stretch): Cell<Image>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addImage","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-image.html","searchKeys":["addImage","fun Table.addImage(drawable: Drawable, scaling: Scaling = Scaling.stretch): Cell<Image>","com.github.mnemotechnician.mkui.extensions.dsl.addImage"]},{"name":"fun Table.addImage(drawable: TextureRegion, scaling: Scaling = Scaling.stretch): Cell<Image>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addImage","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-image.html","searchKeys":["addImage","fun Table.addImage(drawable: TextureRegion, scaling: Scaling = Scaling.stretch): Cell<Image>","com.github.mnemotechnician.mkui.extensions.dsl.addImage"]},{"name":"fun Table.addLabel(text: CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = false, ellipsis: String? = null, align: Int = Align.center): Cell<Label>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addLabel","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-label.html","searchKeys":["addLabel","fun Table.addLabel(text: CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = false, ellipsis: String? = null, align: Int = Align.center): Cell<Label>","com.github.mnemotechnician.mkui.extensions.dsl.addLabel"]},{"name":"fun Table.addSpace(spaceWidth: Float = 1.0f, spaceHeight: Float = 1.0f): Element","description":"com.github.mnemotechnician.mkui.extensions.dsl.addSpace","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-space.html","searchKeys":["addSpace","fun Table.addSpace(spaceWidth: Float = 1.0f, spaceHeight: Float = 1.0f): Element","com.github.mnemotechnician.mkui.extensions.dsl.addSpace"]},{"name":"fun Table.addStack(vararg elements: Element): Cell<Stack>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addStack","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-stack.html","searchKeys":["addStack","fun Table.addStack(vararg elements: Element): Cell<Stack>","com.github.mnemotechnician.mkui.extensions.dsl.addStack"]},{"name":"fun Table.hsplitter(color: Color = Color.white, padTop: Float = 5.0f, padBottom: Float = padTop): Cell<Image>","description":"com.github.mnemotechnician.mkui.extensions.dsl.hsplitter","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/hsplitter.html","searchKeys":["hsplitter","fun Table.hsplitter(color: Color = Color.white, padTop: Float = 5.0f, padBottom: Float = padTop): Cell<Image>","com.github.mnemotechnician.mkui.extensions.dsl.hsplitter"]},{"name":"fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, element: Element): Cell<ScrollPane>","description":"com.github.mnemotechnician.mkui.extensions.dsl.scrollPane","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/scroll-pane.html","searchKeys":["scrollPane","fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, element: Element): Cell<ScrollPane>","com.github.mnemotechnician.mkui.extensions.dsl.scrollPane"]},{"name":"fun Table.vsplitter(color: Color = Color.white, padLeft: Float = 5.0f, padRight: Float = padLeft): Cell<Image>","description":"com.github.mnemotechnician.mkui.extensions.dsl.vsplitter","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/vsplitter.html","searchKeys":["vsplitter","fun Table.vsplitter(color: Color = Color.white, padLeft: Float = 5.0f, padRight: Float = padLeft): Cell<Image>","com.github.mnemotechnician.mkui.extensions.dsl.vsplitter"]},{"name":"fun TablePager(vertical: Boolean = false, background: Drawable = Styles.black3)","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.TablePager","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-table-pager.html","searchKeys":["TablePager","fun TablePager(vertical: Boolean = false, background: Drawable = Styles.black3)","com.github.mnemotechnician.mkui.ui.layout.TablePager.TablePager"]},{"name":"fun ToggleButton(defaultToggled: Boolean = false, toggleableStyle: Button.ButtonStyle = Styles.defaultb)","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.ToggleButton","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/-toggle-button.html","searchKeys":["ToggleButton","fun ToggleButton(defaultToggled: Boolean = false, toggleableStyle: Button.ButtonStyle = Styles.defaultb)","com.github.mnemotechnician.mkui.ui.element.ToggleButton.ToggleButton"]},{"name":"fun Window()","description":"com.github.mnemotechnician.mkui.windows.Window.Window","location":"lib/com.github.mnemotechnician.mkui.windows/-window/-window.html","searchKeys":["Window","fun Window()","com.github.mnemotechnician.mkui.windows.Window.Window"]},{"name":"fun addPage(pageName: String, element: Element): TablePager.Page","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/add-page.html","searchKeys":["addPage","fun addPage(pageName: String, element: Element): TablePager.Page","com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage"]},{"name":"fun bundle(prefix: String = \"\"): BundleDelegate<Nothing>","description":"com.github.mnemotechnician.mkui.delegates.bundle","location":"lib/com.github.mnemotechnician.mkui.delegates/bundle.html","searchKeys":["bundle","fun bundle(prefix: String = \"\"): BundleDelegate<Nothing>","com.github.mnemotechnician.mkui.delegates.bundle"]},{"name":"fun bundle(prefix: String = \"\", vararg substitutions: Any?): BundleDelegate<Any?>","description":"com.github.mnemotechnician.mkui.delegates.bundle","location":"lib/com.github.mnemotechnician.mkui.delegates/bundle.html","searchKeys":["bundle","fun bundle(prefix: String = \"\", vararg substitutions: Any?): BundleDelegate<Any?>","com.github.mnemotechnician.mkui.delegates.bundle"]},{"name":"fun createWindow(window: Window)","description":"com.github.mnemotechnician.mkui.windows.WindowManager.createWindow","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/create-window.html","searchKeys":["createWindow","fun createWindow(window: Window)","com.github.mnemotechnician.mkui.windows.WindowManager.createWindow"]},{"name":"fun destroy()","description":"com.github.mnemotechnician.mkui.windows.Window.destroy","location":"lib/com.github.mnemotechnician.mkui.windows/-window/destroy.html","searchKeys":["destroy","fun destroy()","com.github.mnemotechnician.mkui.windows.Window.destroy"]},{"name":"fun dynamicBundle(lazyPrefix: () -> String?, vararg functions: () -> Any?): LazyDynamicBundleDelegate","description":"com.github.mnemotechnician.mkui.delegates.dynamicBundle","location":"lib/com.github.mnemotechnician.mkui.delegates/dynamic-bundle.html","searchKeys":["dynamicBundle","fun dynamicBundle(lazyPrefix: () -> String?, vararg functions: () -> Any?): LazyDynamicBundleDelegate","com.github.mnemotechnician.mkui.delegates.dynamicBundle"]},{"name":"fun dynamicBundle(prefix: String = \"\", vararg functions: () -> Any?): DynamicBundleDelegate","description":"com.github.mnemotechnician.mkui.delegates.dynamicBundle","location":"lib/com.github.mnemotechnician.mkui.delegates/dynamic-bundle.html","searchKeys":["dynamicBundle","fun dynamicBundle(prefix: String = \"\", vararg functions: () -> Any?): DynamicBundleDelegate","com.github.mnemotechnician.mkui.delegates.dynamicBundle"]},{"name":"fun removePage(): Boolean","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.removePage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/remove-page.html","searchKeys":["removePage","fun removePage(): Boolean","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.removePage"]},{"name":"fun show()","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.show","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/show.html","searchKeys":["show","fun show()","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.show"]},{"name":"fun toggled(listener: (Boolean) -> Unit?)","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.toggled","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/toggled.html","searchKeys":["toggled","fun toggled(listener: (Boolean) -> Unit?)","com.github.mnemotechnician.mkui.ui.element.ToggleButton.toggled"]},{"name":"inline fun <T : Element> Element.asOrNull(): T?","description":"com.github.mnemotechnician.mkui.extensions.elements.asOrNull","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/as-or-null.html","searchKeys":["asOrNull","inline fun <T : Element> Element.asOrNull(): T?","com.github.mnemotechnician.mkui.extensions.elements.asOrNull"]},{"name":"inline fun <T : Element> Element.findElement(elementName: String? = null): T","description":"com.github.mnemotechnician.mkui.extensions.elements.findElement","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/find-element.html","searchKeys":["findElement","inline fun <T : Element> Element.findElement(elementName: String? = null): T","com.github.mnemotechnician.mkui.extensions.elements.findElement"]},{"name":"inline fun <T : Element> Element.findOrNull(elementName: String? = null): T?","description":"com.github.mnemotechnician.mkui.extensions.elements.findOrNull","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/find-or-null.html","searchKeys":["findOrNull","inline fun <T : Element> Element.findOrNull(elementName: String? = null): T?","com.github.mnemotechnician.mkui.extensions.elements.findOrNull"]},{"name":"inline fun <T : Element> Group.child(index: Int): T","description":"com.github.mnemotechnician.mkui.extensions.groups.child","location":"lib/com.github.mnemotechnician.mkui.extensions.groups/child.html","searchKeys":["child","inline fun <T : Element> Group.child(index: Int): T","com.github.mnemotechnician.mkui.extensions.groups.child"]},{"name":"inline fun <T : Element> Group.childOrNull(index: Int): T?","description":"com.github.mnemotechnician.mkui.extensions.groups.childOrNull","location":"lib/com.github.mnemotechnician.mkui.extensions.groups/child-or-null.html","searchKeys":["childOrNull","inline fun <T : Element> Group.childOrNull(index: Int): T?","com.github.mnemotechnician.mkui.extensions.groups.childOrNull"]},{"name":"inline fun <T : Element> T.cell(): Cell<T>?","description":"com.github.mnemotechnician.mkui.extensions.elements.cell","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/cell.html","searchKeys":["cell","inline fun <T : Element> T.cell(): Cell<T>?","com.github.mnemotechnician.mkui.extensions.elements.cell"]},{"name":"inline fun <T : ToggleButton> Cell<T>.toggled(crossinline listener: T.(Boolean) -> Unit): Cell<T>","description":"com.github.mnemotechnician.mkui.ui.element.toggled","location":"lib/com.github.mnemotechnician.mkui.ui.element/toggled.html","searchKeys":["toggled","inline fun <T : ToggleButton> Cell<T>.toggled(crossinline listener: T.(Boolean) -> Unit): Cell<T>","com.github.mnemotechnician.mkui.ui.element.toggled"]},{"name":"inline fun <T> Cell<Element>.getAs(): T","description":"com.github.mnemotechnician.mkui.extensions.elements.getAs","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/get-as.html","searchKeys":["getAs","inline fun <T> Cell<Element>.getAs(): T","com.github.mnemotechnician.mkui.extensions.elements.getAs"]},{"name":"inline fun <T> Cell<Element?>.getAsOrNull(): T?","description":"com.github.mnemotechnician.mkui.extensions.elements.getAsOrNull","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/get-as-or-null.html","searchKeys":["getAsOrNull","inline fun <T> Cell<Element?>.getAsOrNull(): T?","com.github.mnemotechnician.mkui.extensions.elements.getAsOrNull"]},{"name":"inline fun <T> setting(default: T, noinline lazyPrefix: () -> String?): SettingDelegate<T>","description":"com.github.mnemotechnician.mkui.delegates.setting","location":"lib/com.github.mnemotechnician.mkui.delegates/setting.html","searchKeys":["setting","inline fun <T> setting(default: T, noinline lazyPrefix: () -> String?): SettingDelegate<T>","com.github.mnemotechnician.mkui.delegates.setting"]},{"name":"inline fun <T> setting(default: T, prefix: String = \"\"): SettingDelegate<T>","description":"com.github.mnemotechnician.mkui.delegates.setting","location":"lib/com.github.mnemotechnician.mkui.delegates/setting.html","searchKeys":["setting","inline fun <T> setting(default: T, prefix: String = \"\"): SettingDelegate<T>","com.github.mnemotechnician.mkui.delegates.setting"]},{"name":"inline fun Group.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","description":"com.github.mnemotechnician.mkui.extensions.dsl.addTable","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-table.html","searchKeys":["addTable","inline fun Group.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","com.github.mnemotechnician.mkui.extensions.dsl.addTable"]},{"name":"inline fun Table.addCollapser(crossinline shown: () -> Boolean = { true }, background: Drawable = Styles.none, animate: Boolean = false, constructor: Table.() -> Unit = {}): Cell<Collapser>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addCollapser","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-collapser.html","searchKeys":["addCollapser","inline fun Table.addCollapser(crossinline shown: () -> Boolean = { true }, background: Drawable = Styles.none, animate: Boolean = false, constructor: Table.() -> Unit = {}): Cell<Collapser>","com.github.mnemotechnician.mkui.extensions.dsl.addCollapser"]},{"name":"inline fun Table.addCollapser(shown: Boolean = true, background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Collapser>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addCollapser","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-collapser.html","searchKeys":["addCollapser","inline fun Table.addCollapser(shown: Boolean = true, background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Collapser>","com.github.mnemotechnician.mkui.extensions.dsl.addCollapser"]},{"name":"inline fun Table.addImage(crossinline provider: () -> Drawable, scaling: Scaling = Scaling.stretch): Cell<Image>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addImage","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-image.html","searchKeys":["addImage","inline fun Table.addImage(crossinline provider: () -> Drawable, scaling: Scaling = Scaling.stretch): Cell<Image>","com.github.mnemotechnician.mkui.extensions.dsl.addImage"]},{"name":"inline fun Table.addLabel(crossinline provider: () -> CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null, align: Int = Align.center): Cell<Label>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addLabel","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-label.html","searchKeys":["addLabel","inline fun Table.addLabel(crossinline provider: () -> CharSequence, style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null, align: Int = Align.center): Cell<Label>","com.github.mnemotechnician.mkui.extensions.dsl.addLabel"]},{"name":"inline fun Table.addLabels(style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null, align: Int = Align.center, block: (Cell<Label>) -> Unit = {}, vararg elems: Any?)","description":"com.github.mnemotechnician.mkui.extensions.dsl.addLabels","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-labels.html","searchKeys":["addLabels","inline fun Table.addLabels(style: Label.LabelStyle = Styles.defaultLabel, wrap: Boolean = true, ellipsis: String? = null, align: Int = Align.center, block: (Cell<Label>) -> Unit = {}, vararg elems: Any?)","com.github.mnemotechnician.mkui.extensions.dsl.addLabels"]},{"name":"inline fun Table.addStack(constructor: Stack.() -> Unit): Cell<Stack>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addStack","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-stack.html","searchKeys":["addStack","inline fun Table.addStack(constructor: Stack.() -> Unit): Cell<Stack>","com.github.mnemotechnician.mkui.extensions.dsl.addStack"]},{"name":"inline fun Table.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Table>","description":"com.github.mnemotechnician.mkui.extensions.dsl.addTable","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/add-table.html","searchKeys":["addTable","inline fun Table.addTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Cell<Table>","com.github.mnemotechnician.mkui.extensions.dsl.addTable"]},{"name":"inline fun Table.buttonGroup(background: Drawable = Styles.none, constructor: Table.(ButtonGroup<Button>) -> Unit): Cell<Table>","description":"com.github.mnemotechnician.mkui.extensions.dsl.buttonGroup","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/button-group.html","searchKeys":["buttonGroup","inline fun Table.buttonGroup(background: Drawable = Styles.none, constructor: Table.(ButtonGroup<Button>) -> Unit): Cell<Table>","com.github.mnemotechnician.mkui.extensions.dsl.buttonGroup"]},{"name":"inline fun Table.customButton(constructor: Button.() -> Unit, style: Button.ButtonStyle = Styles.defaultb, crossinline onclick: Button.() -> Unit = {}): Cell<Button>","description":"com.github.mnemotechnician.mkui.extensions.dsl.customButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/custom-button.html","searchKeys":["customButton","inline fun Table.customButton(constructor: Button.() -> Unit, style: Button.ButtonStyle = Styles.defaultb, crossinline onclick: Button.() -> Unit = {}): Cell<Button>","com.github.mnemotechnician.mkui.extensions.dsl.customButton"]},{"name":"inline fun Table.hider(crossinline hideHorizontal: Table.() -> Boolean = { false }, crossinline hideVertical: Table.() -> Boolean = { false }, crossinline builder: Table.() -> Unit): Cell<Table>","description":"com.github.mnemotechnician.mkui.extensions.dsl.hider","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/hider.html","searchKeys":["hider","inline fun Table.hider(crossinline hideHorizontal: Table.() -> Boolean = { false }, crossinline hideVertical: Table.() -> Boolean = { false }, crossinline builder: Table.() -> Unit): Cell<Table>","com.github.mnemotechnician.mkui.extensions.dsl.hider"]},{"name":"inline fun Table.imageButton(crossinline provider: () -> Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.imageButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(crossinline provider: () -> Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.extensions.dsl.imageButton"]},{"name":"inline fun Table.imageButton(image: Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.imageButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(image: Drawable, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.extensions.dsl.imageButton"]},{"name":"inline fun Table.imageButton(image: TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.imageButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/image-button.html","searchKeys":["imageButton","inline fun Table.imageButton(image: TextureRegion, style: ImageButton.ImageButtonStyle = Styles.defaulti, crossinline onclick: ImageButton.() -> Unit = {}): Cell<ImageButton>","com.github.mnemotechnician.mkui.extensions.dsl.imageButton"]},{"name":"inline fun Table.imageToggle(crossinline image: (Boolean) -> Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.imageToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/image-toggle.html","searchKeys":["imageToggle","inline fun Table.imageToggle(crossinline image: (Boolean) -> Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.imageToggle"]},{"name":"inline fun Table.imageToggle(text: Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.imageToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/image-toggle.html","searchKeys":["imageToggle","inline fun Table.imageToggle(text: Drawable, toggleableStyle: Button.ButtonStyle = Styles.clearTogglei, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.imageToggle"]},{"name":"inline fun Table.limitedScrollPane(limitW: Boolean = true, limitH: Boolean = limitW, style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","description":"com.github.mnemotechnician.mkui.extensions.dsl.limitedScrollPane","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/limited-scroll-pane.html","searchKeys":["limitedScrollPane","inline fun Table.limitedScrollPane(limitW: Boolean = true, limitH: Boolean = limitW, style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","com.github.mnemotechnician.mkui.extensions.dsl.limitedScrollPane"]},{"name":"inline fun Table.pager(vertical: Boolean = false, constructor: TablePager.() -> Unit): Cell<TablePager>","description":"com.github.mnemotechnician.mkui.extensions.dsl.pager","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/pager.html","searchKeys":["pager","inline fun Table.pager(vertical: Boolean = false, constructor: TablePager.() -> Unit): Cell<TablePager>","com.github.mnemotechnician.mkui.extensions.dsl.pager"]},{"name":"inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","description":"com.github.mnemotechnician.mkui.extensions.dsl.scrollPane","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/scroll-pane.html","searchKeys":["scrollPane","inline fun Table.scrollPane(style: ScrollPane.ScrollPaneStyle = Styles.defaultPane, constructor: Table.(ScrollPane) -> Unit): Cell<ScrollPane>","com.github.mnemotechnician.mkui.extensions.dsl.scrollPane"]},{"name":"inline fun Table.textArea(text: String = \"\", style: TextField.TextFieldStyle = Styles.areaField, crossinline onchange: TextArea.(String) -> Unit = {}): Cell<TextArea>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textArea","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-area.html","searchKeys":["textArea","inline fun Table.textArea(text: String = \"\", style: TextField.TextFieldStyle = Styles.areaField, crossinline onchange: TextArea.(String) -> Unit = {}): Cell<TextArea>","com.github.mnemotechnician.mkui.extensions.dsl.textArea"]},{"name":"inline fun Table.textButton(crossinline provider: () -> String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-button.html","searchKeys":["textButton","inline fun Table.textButton(crossinline provider: () -> String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","com.github.mnemotechnician.mkui.extensions.dsl.textButton"]},{"name":"inline fun Table.textButton(text: String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-button.html","searchKeys":["textButton","inline fun Table.textButton(text: String, style: TextButton.TextButtonStyle = Styles.defaultt, wrap: Boolean = false, crossinline onclick: TextButton.() -> Unit = {}): Cell<TextButton>","com.github.mnemotechnician.mkui.extensions.dsl.textButton"]},{"name":"inline fun Table.textField(text: String = \"\", style: TextField.TextFieldStyle = Styles.defaultField, crossinline onchange: TextField.(String) -> Unit = {}): Cell<TextField>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textField","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-field.html","searchKeys":["textField","inline fun Table.textField(text: String = \"\", style: TextField.TextFieldStyle = Styles.defaultField, crossinline onchange: TextField.(String) -> Unit = {}): Cell<TextField>","com.github.mnemotechnician.mkui.extensions.dsl.textField"]},{"name":"inline fun Table.textToggle(crossinline text: (Boolean) -> String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-toggle.html","searchKeys":["textToggle","inline fun Table.textToggle(crossinline text: (Boolean) -> String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.textToggle"]},{"name":"inline fun Table.textToggle(imageEnabled: Drawable, imageDisabled: Drawable, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-toggle.html","searchKeys":["textToggle","inline fun Table.textToggle(imageEnabled: Drawable, imageDisabled: Drawable, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.textToggle"]},{"name":"inline fun Table.textToggle(text: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-toggle.html","searchKeys":["textToggle","inline fun Table.textToggle(text: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.textToggle"]},{"name":"inline fun Table.textToggle(textEnabled: String, textDisabled: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.textToggle","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/text-toggle.html","searchKeys":["textToggle","inline fun Table.textToggle(textEnabled: String, textDisabled: String, toggleableStyle: Button.ButtonStyle = Styles.togglet, wrap: Boolean = false, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.textToggle"]},{"name":"inline fun Table.toggleButton(constructor: Button.() -> Unit, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","description":"com.github.mnemotechnician.mkui.extensions.dsl.toggleButton","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/toggle-button.html","searchKeys":["toggleButton","inline fun Table.toggleButton(constructor: Button.() -> Unit, toggleableStyle: Button.ButtonStyle = Styles.togglet, crossinline ontoggle: Button.(Boolean) -> Unit = {}): Cell<ToggleButton>","com.github.mnemotechnician.mkui.extensions.dsl.toggleButton"]},{"name":"inline fun Table.wrapper(crossinline width: Table.(originalWidth: Float) -> Float = { it }, crossinline height: Table.(originalHeight: Float) -> Float = { it }, crossinline builder: Table.() -> Unit): Cell<Table>","description":"com.github.mnemotechnician.mkui.extensions.dsl.wrapper","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/wrapper.html","searchKeys":["wrapper","inline fun Table.wrapper(crossinline width: Table.(originalWidth: Float) -> Float = { it }, crossinline height: Table.(originalHeight: Float) -> Float = { it }, crossinline builder: Table.() -> Unit): Cell<Table>","com.github.mnemotechnician.mkui.extensions.dsl.wrapper"]},{"name":"inline fun addPage(pageName: String, constructor: TablePager.Page.() -> Unit): TablePager.Page","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/add-page.html","searchKeys":["addPage","inline fun addPage(pageName: String, constructor: TablePager.Page.() -> Unit): TablePager.Page","com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage"]},{"name":"inline fun createBaseDialog(title: String = \"\", style: Dialog.DialogStyle = Styles.defaultDialog, addCloseButton: Boolean = false, closeOnBack: Boolean = true, crossinline configurator: BaseDialog.() -> Unit): BaseDialog","description":"com.github.mnemotechnician.mkui.extensions.dsl.createBaseDialog","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/create-base-dialog.html","searchKeys":["createBaseDialog","inline fun createBaseDialog(title: String = \"\", style: Dialog.DialogStyle = Styles.defaultDialog, addCloseButton: Boolean = false, closeOnBack: Boolean = true, crossinline configurator: BaseDialog.() -> Unit): BaseDialog","com.github.mnemotechnician.mkui.extensions.dsl.createBaseDialog"]},{"name":"inline fun createDialog(title: String = \"\", style: Dialog.DialogStyle = Styles.defaultDialog, addCloseButton: Boolean = false, closeOnBack: Boolean = true, constructor: (title: String, style: Dialog.DialogStyle) -> Dialog = { t, s -> Dialog(t, s) }, configurator: Dialog.() -> Unit): Dialog","description":"com.github.mnemotechnician.mkui.extensions.dsl.createDialog","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/create-dialog.html","searchKeys":["createDialog","inline fun createDialog(title: String = \"\", style: Dialog.DialogStyle = Styles.defaultDialog, addCloseButton: Boolean = false, closeOnBack: Boolean = true, constructor: (title: String, style: Dialog.DialogStyle) -> Dialog = { t, s -> Dialog(t, s) }, configurator: Dialog.() -> Unit): Dialog","com.github.mnemotechnician.mkui.extensions.dsl.createDialog"]},{"name":"inline fun createTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","description":"com.github.mnemotechnician.mkui.extensions.dsl.createTable","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/create-table.html","searchKeys":["createTable","inline fun createTable(background: Drawable = Styles.none, constructor: Table.() -> Unit = {}): Table","com.github.mnemotechnician.mkui.extensions.dsl.createTable"]},{"name":"inline fun createWindow(name: String, crossinline constructor: Table.() -> Unit)","description":"com.github.mnemotechnician.mkui.windows.WindowManager.createWindow","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/create-window.html","searchKeys":["createWindow","inline fun createWindow(name: String, crossinline constructor: Table.() -> Unit)","com.github.mnemotechnician.mkui.windows.WindowManager.createWindow"]},{"name":"inline fun createWrapper(crossinline width: Table.(originalWidth: Float) -> Float = { it }, crossinline height: Table.(originalHeight: Float) -> Float = { it }, crossinline builder: Table.() -> Unit): Table","description":"com.github.mnemotechnician.mkui.extensions.dsl.createWrapper","location":"lib/com.github.mnemotechnician.mkui.extensions.dsl/create-wrapper.html","searchKeys":["createWrapper","inline fun createWrapper(crossinline width: Table.(originalWidth: Float) -> Float = { it }, crossinline height: Table.(originalHeight: Float) -> Float = { it }, crossinline builder: Table.() -> Unit): Table","com.github.mnemotechnician.mkui.extensions.dsl.createWrapper"]},{"name":"lateinit var buttonsTable: Table","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.buttonsTable","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/buttons-table.html","searchKeys":["buttonsTable","lateinit var buttonsTable: Table","com.github.mnemotechnician.mkui.ui.layout.TablePager.buttonsTable"]},{"name":"lateinit var pageContainer: Table","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.pageContainer","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/page-container.html","searchKeys":["pageContainer","lateinit var pageContainer: Table","com.github.mnemotechnician.mkui.ui.layout.TablePager.pageContainer"]},{"name":"lateinit var table: Table","description":"com.github.mnemotechnician.mkui.windows.Window.table","location":"lib/com.github.mnemotechnician.mkui.windows/-window/table.html","searchKeys":["table","lateinit var table: Table","com.github.mnemotechnician.mkui.windows.Window.table"]},{"name":"object WindowManager","description":"com.github.mnemotechnician.mkui.windows.WindowManager","location":"lib/com.github.mnemotechnician.mkui.windows/-window-manager/index.html","searchKeys":["WindowManager","object WindowManager","com.github.mnemotechnician.mkui.windows.WindowManager"]},{"name":"open class BundleDelegate<T>(prefix: String, substitutions: Array<T?>?)","description":"com.github.mnemotechnician.mkui.delegates.BundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-bundle-delegate/index.html","searchKeys":["BundleDelegate","open class BundleDelegate<T>(prefix: String, substitutions: Array<T?>?)","com.github.mnemotechnician.mkui.delegates.BundleDelegate"]},{"name":"open class DynamicBundleDelegate(prefix: String, functions: Array<out () -> Any?>?) : BundleDelegate<Any> ","description":"com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-dynamic-bundle-delegate/index.html","searchKeys":["DynamicBundleDelegate","open class DynamicBundleDelegate(prefix: String, functions: Array<out () -> Any?>?) : BundleDelegate<Any> ","com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate"]},{"name":"open class LazyDynamicBundleDelegate(lazyPrefix: () -> String?, functions: Array<out () -> Any?>) : DynamicBundleDelegate","description":"com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-dynamic-bundle-delegate/index.html","searchKeys":["LazyDynamicBundleDelegate","open class LazyDynamicBundleDelegate(lazyPrefix: () -> String?, functions: Array<out () -> Any?>) : DynamicBundleDelegate","com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate"]},{"name":"open class LazyNameSettingDelegate<T>(lazyPrefix: () -> String?, default: T) : SettingDelegate<T> ","description":"com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-name-setting-delegate/index.html","searchKeys":["LazyNameSettingDelegate","open class LazyNameSettingDelegate<T>(lazyPrefix: () -> String?, default: T) : SettingDelegate<T> ","com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate"]},{"name":"open class SettingDelegate<T>(prefix: String, default: T)","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/index.html","searchKeys":["SettingDelegate","open class SettingDelegate<T>(prefix: String, default: T)","com.github.mnemotechnician.mkui.delegates.SettingDelegate"]},{"name":"open class TablePager(vertical: Boolean, background: Drawable) : Table","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/index.html","searchKeys":["TablePager","open class TablePager(vertical: Boolean, background: Drawable) : Table","com.github.mnemotechnician.mkui.ui.layout.TablePager"]},{"name":"open class ToggleButton(defaultToggled: Boolean, toggleableStyle: Button.ButtonStyle) : Button","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/index.html","searchKeys":["ToggleButton","open class ToggleButton(defaultToggled: Boolean, toggleableStyle: Button.ButtonStyle) : Button","com.github.mnemotechnician.mkui.ui.element.ToggleButton"]},{"name":"open fun addAction(action: Action)","description":"com.github.mnemotechnician.mkui.windows.Window.addAction","location":"lib/com.github.mnemotechnician.mkui.windows/-window/add-action.html","searchKeys":["addAction","open fun addAction(action: Action)","com.github.mnemotechnician.mkui.windows.Window.addAction"]},{"name":"open fun addPage(name: String, page: Table): Cell<TextButton>","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/add-page.html","searchKeys":["addPage","open fun addPage(name: String, page: Table): Cell<TextButton>","com.github.mnemotechnician.mkui.ui.layout.TablePager.addPage"]},{"name":"open fun createPage(name: String): TablePager.Page","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.createPage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/create-page.html","searchKeys":["createPage","open fun createPage(name: String): TablePager.Page","com.github.mnemotechnician.mkui.ui.layout.TablePager.createPage"]},{"name":"open fun findPage(pageName: String): TablePager.Page?","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.findPage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/find-page.html","searchKeys":["findPage","open fun findPage(pageName: String): TablePager.Page?","com.github.mnemotechnician.mkui.ui.layout.TablePager.findPage"]},{"name":"open fun onDestroy()","description":"com.github.mnemotechnician.mkui.windows.Window.onDestroy","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-destroy.html","searchKeys":["onDestroy","open fun onDestroy()","com.github.mnemotechnician.mkui.windows.Window.onDestroy"]},{"name":"open fun onDrag()","description":"com.github.mnemotechnician.mkui.windows.Window.onDrag","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-drag.html","searchKeys":["onDrag","open fun onDrag()","com.github.mnemotechnician.mkui.windows.Window.onDrag"]},{"name":"open fun onFullScreen(fullscreen: Boolean)","description":"com.github.mnemotechnician.mkui.windows.Window.onFullScreen","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-full-screen.html","searchKeys":["onFullScreen","open fun onFullScreen(fullscreen: Boolean)","com.github.mnemotechnician.mkui.windows.Window.onFullScreen"]},{"name":"open fun onToggle(collapsed: Boolean)","description":"com.github.mnemotechnician.mkui.windows.Window.onToggle","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-toggle.html","searchKeys":["onToggle","open fun onToggle(collapsed: Boolean)","com.github.mnemotechnician.mkui.windows.Window.onToggle"]},{"name":"open fun onUpdate()","description":"com.github.mnemotechnician.mkui.windows.Window.onUpdate","location":"lib/com.github.mnemotechnician.mkui.windows/-window/on-update.html","searchKeys":["onUpdate","open fun onUpdate()","com.github.mnemotechnician.mkui.windows.Window.onUpdate"]},{"name":"open fun removePage(page: TablePager.Page): Boolean","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.removePage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/remove-page.html","searchKeys":["removePage","open fun removePage(page: TablePager.Page): Boolean","com.github.mnemotechnician.mkui.ui.layout.TablePager.removePage"]},{"name":"open fun removePage(pageName: String): Boolean","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.removePage","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/remove-page.html","searchKeys":["removePage","open fun removePage(pageName: String): Boolean","com.github.mnemotechnician.mkui.ui.layout.TablePager.removePage"]},{"name":"open fun shrink()","description":"com.github.mnemotechnician.mkui.windows.Window.shrink","location":"lib/com.github.mnemotechnician.mkui.windows/-window/shrink.html","searchKeys":["shrink","open fun shrink()","com.github.mnemotechnician.mkui.windows.Window.shrink"]},{"name":"open inner class Page(name: String, background: Drawable) : Table","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/index.html","searchKeys":["Page","open inner class Page(name: String, background: Drawable) : Table","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page"]},{"name":"open operator fun getValue(thisRef: Any?, property: KProperty<*>): String","description":"com.github.mnemotechnician.mkui.delegates.BundleDelegate.getValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-bundle-delegate/get-value.html","searchKeys":["getValue","open operator fun getValue(thisRef: Any?, property: KProperty<*>): String","com.github.mnemotechnician.mkui.delegates.BundleDelegate.getValue"]},{"name":"open operator fun getValue(thisRef: Any?, property: KProperty<*>): T","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate.getValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/get-value.html","searchKeys":["getValue","open operator fun getValue(thisRef: Any?, property: KProperty<*>): T","com.github.mnemotechnician.mkui.delegates.SettingDelegate.getValue"]},{"name":"open operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate.setValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/set-value.html","searchKeys":["setValue","open operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","com.github.mnemotechnician.mkui.delegates.SettingDelegate.setValue"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"com.github.mnemotechnician.mkui.windows.Window.equals","location":"lib/com.github.mnemotechnician.mkui.windows/-window/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","com.github.mnemotechnician.mkui.windows.Window.equals"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): String","description":"com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.getValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-dynamic-bundle-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): String","com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): String","description":"com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.getValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-dynamic-bundle-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): String","com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): T","description":"com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.getValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-name-setting-delegate/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): T","com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.getValue"]},{"name":"open operator override fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","description":"com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.setValue","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-name-setting-delegate/set-value.html","searchKeys":["setValue","open operator override fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.setValue"]},{"name":"open override fun act(delta: Float)","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.act","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/act.html","searchKeys":["act","open override fun act(delta: Float)","com.github.mnemotechnician.mkui.ui.element.ToggleButton.act"]},{"name":"open override fun hashCode(): Int","description":"com.github.mnemotechnician.mkui.windows.Window.hashCode","location":"lib/com.github.mnemotechnician.mkui.windows/-window/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","com.github.mnemotechnician.mkui.windows.Window.hashCode"]},{"name":"open override fun setBackground(drawable: Drawable)","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.setBackground","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/set-background.html","searchKeys":["setBackground","open override fun setBackground(drawable: Drawable)","com.github.mnemotechnician.mkui.ui.layout.TablePager.setBackground"]},{"name":"open override fun setStyle(style: Button.ButtonStyle)","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.setStyle","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/set-style.html","searchKeys":["setStyle","open override fun setStyle(style: Button.ButtonStyle)","com.github.mnemotechnician.mkui.ui.element.ToggleButton.setStyle"]},{"name":"open override fun toggle()","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.toggle","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/toggle.html","searchKeys":["toggle","open override fun toggle()","com.github.mnemotechnician.mkui.ui.element.ToggleButton.toggle"]},{"name":"open val supportsFullScreen: Boolean","description":"com.github.mnemotechnician.mkui.windows.Window.supportsFullScreen","location":"lib/com.github.mnemotechnician.mkui.windows/-window/supports-full-screen.html","searchKeys":["supportsFullScreen","open val supportsFullScreen: Boolean","com.github.mnemotechnician.mkui.windows.Window.supportsFullScreen"]},{"name":"operator fun Group.plus(other: Element): Group","description":"com.github.mnemotechnician.mkui.extensions.groups.plus","location":"lib/com.github.mnemotechnician.mkui.extensions.groups/plus.html","searchKeys":["plus","operator fun Group.plus(other: Element): Group","com.github.mnemotechnician.mkui.extensions.groups.plus"]},{"name":"operator fun Table.plus(other: Element): Table","description":"com.github.mnemotechnician.mkui.extensions.groups.plus","location":"lib/com.github.mnemotechnician.mkui.extensions.groups/plus.html","searchKeys":["plus","operator fun Table.plus(other: Element): Table","com.github.mnemotechnician.mkui.extensions.groups.plus"]},{"name":"val button: TextButton","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.button","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/button.html","searchKeys":["button","val button: TextButton","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.button"]},{"name":"val default: T","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate.default","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/default.html","searchKeys":["default","val default: T","com.github.mnemotechnician.mkui.delegates.SettingDelegate.default"]},{"name":"val functions: Array<out () -> Any?>?","description":"com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.functions","location":"lib/com.github.mnemotechnician.mkui.delegates/-dynamic-bundle-delegate/functions.html","searchKeys":["functions","val functions: Array<out () -> Any?>?","com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.functions"]},{"name":"val lazyPrefix: () -> String?","description":"com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.lazyPrefix","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-dynamic-bundle-delegate/lazy-prefix.html","searchKeys":["lazyPrefix","val lazyPrefix: () -> String?","com.github.mnemotechnician.mkui.delegates.LazyDynamicBundleDelegate.lazyPrefix"]},{"name":"val lazyPrefix: () -> String?","description":"com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.lazyPrefix","location":"lib/com.github.mnemotechnician.mkui.delegates/-lazy-name-setting-delegate/lazy-prefix.html","searchKeys":["lazyPrefix","val lazyPrefix: () -> String?","com.github.mnemotechnician.mkui.delegates.LazyNameSettingDelegate.lazyPrefix"]},{"name":"val pages: HashSet<TablePager.Page>","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.pages","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/pages.html","searchKeys":["pages","val pages: HashSet<TablePager.Page>","com.github.mnemotechnician.mkui.ui.layout.TablePager.pages"]},{"name":"val parent: TablePager","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.parent","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/-page/parent.html","searchKeys":["parent","val parent: TablePager","com.github.mnemotechnician.mkui.ui.layout.TablePager.Page.parent"]},{"name":"val substitutions: Array<T?>?","description":"com.github.mnemotechnician.mkui.delegates.BundleDelegate.substitutions","location":"lib/com.github.mnemotechnician.mkui.delegates/-bundle-delegate/substitutions.html","searchKeys":["substitutions","val substitutions: Array<T?>?","com.github.mnemotechnician.mkui.delegates.BundleDelegate.substitutions"]},{"name":"val vertical: Boolean = false","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.vertical","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/vertical.html","searchKeys":["vertical","val vertical: Boolean = false","com.github.mnemotechnician.mkui.ui.layout.TablePager.vertical"]},{"name":"var Label.content: CharSequence","description":"com.github.mnemotechnician.mkui.extensions.elements.content","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/content.html","searchKeys":["content","var Label.content: CharSequence","com.github.mnemotechnician.mkui.extensions.elements.content"]},{"name":"var TextButton.content: CharSequence","description":"com.github.mnemotechnician.mkui.extensions.elements.content","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/content.html","searchKeys":["content","var TextButton.content: CharSequence","com.github.mnemotechnician.mkui.extensions.elements.content"]},{"name":"var TextField.content: String","description":"com.github.mnemotechnician.mkui.extensions.elements.content","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/content.html","searchKeys":["content","var TextField.content: String","com.github.mnemotechnician.mkui.extensions.elements.content"]},{"name":"var TextField.hint: String?","description":"com.github.mnemotechnician.mkui.extensions.elements.hint","location":"lib/com.github.mnemotechnician.mkui.extensions.elements/hint.html","searchKeys":["hint","var TextField.hint: String?","com.github.mnemotechnician.mkui.extensions.elements.hint"]},{"name":"var cachedOutput: String? = null","description":"com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.cachedOutput","location":"lib/com.github.mnemotechnician.mkui.delegates/-dynamic-bundle-delegate/cached-output.html","searchKeys":["cachedOutput","var cachedOutput: String? = null","com.github.mnemotechnician.mkui.delegates.DynamicBundleDelegate.cachedOutput"]},{"name":"var fullScreen: Boolean = false","description":"com.github.mnemotechnician.mkui.windows.Window.fullScreen","location":"lib/com.github.mnemotechnician.mkui.windows/-window/full-screen.html","searchKeys":["fullScreen","var fullScreen: Boolean = false","com.github.mnemotechnician.mkui.windows.Window.fullScreen"]},{"name":"var isCollapsed: Boolean = false","description":"com.github.mnemotechnician.mkui.windows.Window.isCollapsed","location":"lib/com.github.mnemotechnician.mkui.windows/-window/is-collapsed.html","searchKeys":["isCollapsed","var isCollapsed: Boolean = false","com.github.mnemotechnician.mkui.windows.Window.isCollapsed"]},{"name":"var isDragged: Boolean = false","description":"com.github.mnemotechnician.mkui.windows.Window.isDragged","location":"lib/com.github.mnemotechnician.mkui.windows/-window/is-dragged.html","searchKeys":["isDragged","var isDragged: Boolean = false","com.github.mnemotechnician.mkui.windows.Window.isDragged"]},{"name":"var isEnabled: Boolean","description":"com.github.mnemotechnician.mkui.ui.element.ToggleButton.isEnabled","location":"lib/com.github.mnemotechnician.mkui.ui.element/-toggle-button/is-enabled.html","searchKeys":["isEnabled","var isEnabled: Boolean","com.github.mnemotechnician.mkui.ui.element.ToggleButton.isEnabled"]},{"name":"var prefix: String","description":"com.github.mnemotechnician.mkui.delegates.BundleDelegate.prefix","location":"lib/com.github.mnemotechnician.mkui.delegates/-bundle-delegate/prefix.html","searchKeys":["prefix","var prefix: String","com.github.mnemotechnician.mkui.delegates.BundleDelegate.prefix"]},{"name":"var prefix: String","description":"com.github.mnemotechnician.mkui.delegates.SettingDelegate.prefix","location":"lib/com.github.mnemotechnician.mkui.delegates/-setting-delegate/prefix.html","searchKeys":["prefix","var prefix: String","com.github.mnemotechnician.mkui.delegates.SettingDelegate.prefix"]},{"name":"var shrinkOnSwitch: Boolean = true","description":"com.github.mnemotechnician.mkui.ui.layout.TablePager.shrinkOnSwitch","location":"lib/com.github.mnemotechnician.mkui.ui.layout/-table-pager/shrink-on-switch.html","searchKeys":["shrinkOnSwitch","var shrinkOnSwitch: Boolean = true","com.github.mnemotechnician.mkui.ui.layout.TablePager.shrinkOnSwitch"]}]
