import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import arc.math.geom.Vec2
import arc.math.geom.Vec3
import arc.graphics.Color
import kotlin.reflect.KClass

buildscript {
	repositories {
		maven("https://www.jitpack.io")
	}
	dependencies {
		classpath("com.github.Anuken.Arc:arc-core:v136")
	}
}

plugins {
	kotlin("jvm") version "1.8.0"
	id("org.jetbrains.dokka") version "1.7.20"

	`java-library` //todo: why is this added
	`maven-publish`
}

repositories {
	mavenCentral()
	maven("https://www.jitpack.io")
}

val mindustryVersion = "v136"

dependencies {
	compileOnly("com.github.Anuken.Arc:arc-core:$mindustryVersion")
	compileOnly("com.github.Anuken.Mindustry:core:$mindustryVersion")

	testImplementation(kotlin("test"))
	testImplementation("com.github.Anuken.Arc:arc-core:$mindustryVersion")
	testImplementation("com.github.Anuken.Mindustry:core:$mindustryVersion")
}

tasks.jar {
	archiveFileName.set("MKUI.jar")
}

tasks.test {
	useJUnitPlatform()
}

tasks.withType<JavaCompile> {
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"
}

tasks.withType<KotlinCompile> {
	kotlinOptions {
		jvmTarget = "1.8"
		freeCompilerArgs += arrayOf(
			"-Xcontext-receivers"
		)
	}
}

val javadocJar by tasks.creating(Jar::class) {
	from(tasks.dokkaJavadoc.get().outputs)
	archiveClassifier.set("javadoc")
}

val sourceJar by tasks.creating(Jar::class) {
	from(sourceSets["main"].allSource)
	archiveClassifier.set("sources")
}

publishing {
	publications {
		create<MavenPublication>("maven") {
			groupId = "com.github.mnemotechnician"
			artifactId = "mkui"
			version = "v1.2.2"

			from(components["java"])
			artifact(javadocJar)
			artifact(sourceJar)
		}
	}
}


protected data class Op(val operator: String, val operation: String, val otherType: String? = null)
protected val Op.scalar get() = copy(otherType = "Float")

task("generateVectorExtensions") {
	val packagePrefix = """
		//
		// This file was auto-generated by the generateVectorExtensions gradle task!
		//
		
		package com.github.mnemotechnician.mkui.extensions
	""".trimIndent()

	fun createPair(type: String, operator: String, operation: String, otherType: String) = """
		/** Creates a new $type that is the result of the operation "this $operator other". */
		inline operator fun $type.$operator(other: $otherType): $type = $type(this).$operation(other)
		
		/** Modifies this $type so that its value is the result of the operation "this $operator other". */
		inline operator fun $type.${operator}Assign(other: $otherType) {
			$operation(other)
		}
	""".trimIndent()

	outputs.upToDateWhen { false }

	doLast {
		val plusOp = Op("plus", "add")
		val minusOp = Op("minus", "sub")
		val timesOp = Op("times", "mul")
		val divOp = Op("div", "div")

		val types = listOf<Pair<KClass<*>, List<Op>>>(
			Vec2::class to listOf(plusOp, minusOp, timesOp, divOp, timesOp.scalar),
			Vec3::class to listOf(plusOp, minusOp, timesOp, divOp, timesOp.scalar),
			Color::class to listOf(plusOp, minusOp, timesOp, timesOp.scalar)
		)

		for ((type, ops) in types) {
			val output = File("$projectDir/src/main/kotlin/extensions/${type.simpleName}ExtensionsGen.kt")

			val imports = "import ${type.qualifiedName}\nimport com.github.mnemotechnician.mkui.extensions.*"
			val functions = ops.joinToString("\n\n") { (operator, operation, otherType) ->
				createPair(type.simpleName!!, operator, operation, otherType ?: type.simpleName!!)
			}

			output.writeText(listOf(packagePrefix, imports, functions).joinToString("\n\n"))
		}
	}
}
